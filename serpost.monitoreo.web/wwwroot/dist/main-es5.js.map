{"version":3,"sources":["src/app/admin/admin.component.html","src/app/app.component.html","src/app/home/home.component.html","src/app/login/login.component.html","src/$_lazy_route_resource lazy namespace object","src/app/_helpers/auth.guard.ts","src/app/_helpers/error.interceptor.ts","src/app/_helpers/fake-backend.ts","src/app/_helpers/jwt.interceptor.ts","src/app/_models/role.ts","src/app/_models/user.ts","src/app/_services/authentication.service.ts","src/app/_services/camara.services.ts","src/app/_services/user.service.ts","src/app/admin/admin.component.ts","src/app/app.component.ts","src/app/app.module.ts","src/app/app.routing.ts","src/app/home/home.component.ts","src/app/login/login.component.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"card mt-4\\\">\\r\\n    <h4 class=\\\"card-header\\\">Admin</h4>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <p>This page can be accessed <u>only by administrators</u>.</p>\\r\\n        <p class=\\\"mb-1\\\">All users from secure (admin only) api end point:</p>\\r\\n        <div *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm\\\"></div>\\r\\n        <ul *ngIf=\\\"users\\\">\\r\\n            <li *ngFor=\\\"let user of users\\\">{{user.firstName}} {{user.lastName}}</li>\\r\\n        </ul>\\r\\n    </div>\\r\\n</div>\"","export default \"<!-- nav -->\\r\\n<nav class=\\\"navbar navbar-expand navbar-dark bg-dark\\\" *ngIf=\\\"currentUser\\\">\\r\\n    <div class=\\\"navbar-nav\\\">\\r\\n        <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/\\\">Cámaras</a>\\r\\n        <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/admin\\\" *ngIf=\\\"isAdmin\\\">Admin</a>\\r\\n        <a class=\\\"nav-item nav-link\\\" (click)=\\\"logout()\\\">Logout</a>\\r\\n    </div>\\r\\n</nav>\\r\\n\\r\\n<!-- main app container -->\\r\\n<div class=\\\"container\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\\r\\n\\r\\n<!-- credits -->\\r\\n<!-- <div class=\\\"text-center mt-4\\\">\\r\\n    <p>\\r\\n        <a href=\\\"https://jasonwatmore.com/post/2019/08/06/angular-8-role-based-authorization-tutorial-with-example\\\" target=\\\"_top\\\">Angular 8 - Role Based Authorization Tutorial with Example</a>\\r\\n    </p>\\r\\n    <p>\\r\\n        <a href=\\\"https://jasonwatmore.com\\\" target=\\\"_top\\\">JasonWatmore.com</a>\\r\\n    </p>\\r\\n</div> -->\"","export default \"<div class=\\\"card mt-4\\\">\\r\\n    <h4 class=\\\"card-header\\\">Cámaras</h4>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <!-- <p>You're logged in with Angular 8 & JWT!!</p>\\r\\n        <p>Your role is: <strong>{{currentUser.role}}</strong>.</p>\\r\\n        <p>This page can be accessed by <u>all authenticated users</u>.</p>\\r\\n        <p class=\\\"mb-1\\\">Current user from secure api end point:</p>\\r\\n        <div *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm\\\"></div>\\r\\n        <ul *ngIf=\\\"userFromApi\\\">\\r\\n            <li>{{userFromApi.firstName}} {{userFromApi.lastName}}</li>\\r\\n        </ul> -->\\r\\n\\r\\n        <div *ngFor=\\\"let cam  of cams\\\">\\r\\n            <li><a target=\\\"_blank\\\" href=\\\"{{cam.url_camara}}\\\">camara {{cam.id_camara}}</a></li>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","export default \"<div class=\\\"col-md-6 offset-md-3 mt-5\\\">\\r\\n    <div class=\\\"alert alert-info\\\">\\r\\n        <strong>U1</strong> - U: ACHAVARRI P: 123456<br />\\r\\n        <strong>U2</strong> - U: CNICOLINI P: 123456\\r\\n    </div>\\r\\n    <div class=\\\"card\\\">\\r\\n        <h4 class=\\\"card-header\\\">Acceda a su cuenta</h4>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"username\\\">Username</label>\\r\\n                    <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\r\\n                    <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                    Login\\r\\n                </button>\\r\\n                <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger mt-3 mb-0\\\">{{error}}</div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>            \"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { AuthenticationService } from '@app/_services';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(\r\n        private router: Router,\r\n        private authenticationService: AuthenticationService\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const currentUser = this.authenticationService.currentUserValue;\r\n        if (currentUser) {\r\n            // check if route is restricted by role\r\n            if (route.data.roles && route.data.roles.indexOf(currentUser.role) === -1) {\r\n                // role not authorised so redirect to home page\r\n                this.router.navigate(['/']);\r\n                return false;\r\n            }\r\n\r\n            // authorised so return true\r\n            return true;\r\n        }\r\n\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AuthenticationService } from '@app/_services';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(private authenticationService: AuthenticationService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if ([401, 403].indexOf(err.status) !== -1) {\r\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\r\n                this.authenticationService.logout();\r\n                location.reload(true);\r\n            }\r\n\r\n            const error = err.error.message || err.statusText;\r\n            return throwError(error);\r\n        }))\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\r\n\r\nimport { User, Role } from '@app/_models';\r\n\r\nconst users: User[] = [\r\n    { id: 1, username: 'admin', password: 'admin', firstName: 'Admin', lastName: 'User', role: Role.Admin },\r\n    { id: 2, username: 'user', password: 'user', firstName: 'Normal', lastName: 'User', role: Role.User }\r\n];\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n\r\n        // wrap in delayed observable to simulate server api call\r\n        return of(null)\r\n            .pipe(mergeMap(handleRoute))\r\n            .pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)\r\n            .pipe(delay(500))\r\n            .pipe(dematerialize());\r\n\r\n        function handleRoute() {\r\n            switch (true) {\r\n                case url.endsWith('/users/authenticate') && method === 'POST':\r\n                    return authenticate();\r\n                case url.endsWith('/users') && method === 'GET':\r\n                    return getUsers();\r\n                case url.match(/\\/users\\/\\d+$/) && method === 'GET':\r\n                    return getUserById();\r\n                default:\r\n                    // pass through any requests not handled above\r\n                    return next.handle(request);\r\n            }\r\n\r\n        }\r\n\r\n        // route functions\r\n\r\n        function authenticate() {\r\n            const { username, password } = body;\r\n            const user = users.find(x => x.username === username && x.password === password);\r\n            if (!user) return error('Username or password is incorrect');\r\n            return ok({\r\n                id: user.id,\r\n                username: user.username,\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                role: user.role,\r\n                token: `fake-jwt-token.${user.id}`\r\n            });\r\n        }\r\n\r\n        function getUsers() {\r\n            if (!isAdmin()) return unauthorized();\r\n            return ok(users);\r\n        }\r\n\r\n        function getUserById() {\r\n            if (!isLoggedIn()) return unauthorized();\r\n\r\n            // only admins can access other user records\r\n            if (!isAdmin() && currentUser().id !== idFromUrl()) return unauthorized();\r\n\r\n            const user = users.find(x => x.id === idFromUrl());\r\n            return ok(user);\r\n        }\r\n\r\n        // helper functions\r\n\r\n        function ok(body) {\r\n            return of(new HttpResponse({ status: 200, body }));\r\n        }\r\n\r\n        function unauthorized() {\r\n            return throwError({ status: 401, error: { message: 'unauthorized' } });\r\n        }\r\n\r\n        function error(message) {\r\n            return throwError({ status: 400, error: { message } });\r\n        }\r\n\r\n        function isLoggedIn() {\r\n            const authHeader = headers.get('Authorization') || '';\r\n            return authHeader.startsWith('Bearer fake-jwt-token');\r\n        }\r\n\r\n        function isAdmin() {\r\n            return isLoggedIn() && currentUser().role === Role.Admin;\r\n        }\r\n\r\n        function currentUser() {\r\n            if (!isLoggedIn()) return;\r\n            const id = parseInt(headers.get('Authorization').split('.')[1]);\r\n            return users.find(x => x.id === id);\r\n        }\r\n\r\n        function idFromUrl() {\r\n            const urlParts = url.split('/');\r\n            return parseInt(urlParts[urlParts.length - 1]);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fakeBackendProvider = {\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptor,\r\n    multi: true\r\n};","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { AuthenticationService } from '@app/_services';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private authenticationService: AuthenticationService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add auth header with jwt if user is logged in and request is to api url\r\n        const currentUser = this.authenticationService.currentUserValue;\r\n        // const isLoggedIn = currentUser && currentUser.token;\r\n        // const isApiUrl = request.url.startsWith(environment.apiUrl);\r\n        // if (isLoggedIn && isApiUrl) {\r\n        //     request = request.clone({\r\n        //         setHeaders: {\r\n        //             Authorization: `Bearer ${currentUser.token}`\r\n        //         }\r\n        //     });\r\n        // }\r\n\r\n        if (currentUser && currentUser.token) {\r\n            //console.log('dentro el vale interceptor es',currentUser);\r\n            //console.log('dentro el vale token es',currentUser.token);\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${currentUser.token}`\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request);\r\n    }\r\n}","export enum Role {\r\n    User = 'User',\r\n    Admin = 'Admin'\r\n}","import { Role } from \"./role\";\r\n\r\nexport class User {\r\n    id: number;\r\n    username: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    role: Role;\r\n    token?: string;\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { User } from '@app/_models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService {\r\n    private currentUserSubject: BehaviorSubject<User>;\r\n    public currentUser: Observable<User>;\r\n\r\n    constructor(private http: HttpClient) {\r\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\r\n        this.currentUser = this.currentUserSubject.asObservable();\r\n    }\r\n\r\n    public get currentUserValue(): User {\r\n        return this.currentUserSubject.value;\r\n    }\r\n\r\n    login(username: string, password: string) {\r\n        return this.http.post<any>(`/Auth/pochito`, { username, password })\r\n            .pipe(map(user => {\r\n\r\n                console.log (user);\r\n                // login successful if there's a jwt token in the response\r\n                if (user && user.token) {\r\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                    localStorage.setItem('currentUser', JSON.stringify(user));\r\n                    this.currentUserSubject.next(user);\r\n                }\r\n\r\n                return user;\r\n            }));\r\n\r\n        // this.http.post<any>(\"/Auth/pochito\", { username, password }).subscribe(user =>\r\n        //     {\r\n        //         console.log(user);\r\n                \r\n        //     })\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentUser');\r\n        this.currentUserSubject.next(null);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { User } from '@app/_models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CamaraService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    // getAll() {\r\n    //     return this.http.get<User[]>(`${environment.apiUrl}/users`);\r\n    // }\r\n\r\n    // getById(id: number) {\r\n    //     return this.http.get<User>(`${environment.apiUrl}/users/${id}`);\r\n    // }\r\n\r\n    getCameraPerUser ()\r\n    {\r\n        return this.http.get<any[]>('/Camara/user');\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { User } from '@app/_models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    // getAll() {\r\n    //     return this.http.get<User[]>(`${environment.apiUrl}/users`);\r\n    // }\r\n\r\n    // getById(id: number) {\r\n    //     return this.http.get<User>(`${environment.apiUrl}/users/${id}`);\r\n    // }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { User } from '@app/_models';\r\nimport { UserService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'admin.component.html' })\r\nexport class AdminComponent implements OnInit {\r\n    loading = false;\r\n    users: User[] = [];\r\n\r\n    constructor(private userService: UserService) { }\r\n\r\n    ngOnInit() {\r\n        this.loading = true;\r\n        // this.userService.getAll().pipe(first()).subscribe(users => {\r\n        //     this.loading = false;\r\n        //     this.users = users;\r\n        // });\r\n    }\r\n}","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthenticationService } from './_services';\r\nimport { User, Role } from './_models';\r\n\r\n@Component({ selector: 'app', templateUrl: 'app.component.html' })\r\nexport class AppComponent {\r\n    currentUser: User;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private authenticationService: AuthenticationService\r\n    ) {\r\n        this.authenticationService.currentUser.subscribe(x => this.currentUser = x);\r\n    }\r\n\r\n    get isAdmin() {\r\n        return this.currentUser && this.currentUser.role === Role.Admin;\r\n    }\r\n\r\n    logout() {\r\n        this.authenticationService.logout();\r\n        this.router.navigate(['/login']);\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\n// used to create fake backend\r\nimport { fakeBackendProvider } from './_helpers';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { appRoutingModule } from './app.routing';\r\n\r\nimport { JwtInterceptor, ErrorInterceptor } from './_helpers';\r\nimport { HomeComponent } from './home';\r\nimport { AdminComponent } from './admin';\r\nimport { LoginComponent } from './login';\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserModule,\r\n        ReactiveFormsModule,\r\n        HttpClientModule,\r\n        appRoutingModule\r\n    ],\r\n    declarations: [\r\n        AppComponent,\r\n        HomeComponent,\r\n        AdminComponent,\r\n        LoginComponent\r\n    ],\r\n    providers: [\r\n        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\r\n\r\n        // provider used to create fake backend\r\n        fakeBackendProvider\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule { }","import { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { HomeComponent } from './home';\r\nimport { AdminComponent } from './admin';\r\nimport { LoginComponent } from './login';\r\nimport { AuthGuard } from './_helpers';\r\nimport { Role } from './_models';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: HomeComponent,\r\n        canActivate: [AuthGuard]\r\n    },\r\n    {\r\n        path: 'admin',\r\n        component: AdminComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.Admin] }\r\n    },\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent\r\n    },\r\n\r\n    // otherwise redirect to home\r\n    { path: '**', redirectTo: '' }\r\n];\r\n\r\nexport const appRoutingModule = RouterModule.forRoot(routes);","import { Component } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { User } from '@app/_models';\r\nimport { UserService, AuthenticationService, CamaraService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'home.component.html' })\r\nexport class HomeComponent {\r\n    loading = false;\r\n    currentUser: User;\r\n    userFromApi: User;\r\n\r\n    cams:any[] = [];\r\n\r\n    constructor(\r\n        private userService: UserService,\r\n        private authenticationService: AuthenticationService,\r\n        private camaraService:CamaraService\r\n    ) {\r\n        this.currentUser = this.authenticationService.currentUserValue;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loading = true;\r\n        // this.userService.getById(this.currentUser.id).pipe(first()).subscribe(user => {\r\n        //     this.loading = false;\r\n        //     this.userFromApi = user;\r\n        // });\r\n\r\n\r\n        this.camaraService.getCameraPerUser().subscribe ( cam => \r\n            {\r\n                this.loading = false;\r\n                console.log (cam)\r\n                this.cams = cam;\r\n            }\r\n        )\r\n        \r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AuthenticationService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n    loginForm: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    returnUrl: string;\r\n    error = '';\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authenticationService: AuthenticationService\r\n    ) { \r\n        // redirect to home if already logged in\r\n        if (this.authenticationService.currentUserValue) { \r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loginForm = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        });\r\n\r\n        // get return url from route parameters or default to '/'\r\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.loginForm.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // stop here if form is invalid\r\n        if (this.loginForm.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.authenticationService.login(this.f.username.value, this.f.password.value)\r\n            .pipe(first())\r\n            .subscribe(\r\n                data => {\r\n                    this.router.navigate([this.returnUrl]);\r\n                },\r\n                error => {\r\n                    this.error = error;\r\n                    this.loading = false;\r\n                });\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\n// export const environment = {\r\n//   production: false\r\n// };\r\n\r\nexport const environment = {\r\n  production: true,\r\n  // apiUrl: 'http://localhost:5000'\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nexport function getBaseUrl() {\r\n  return document.getElementsByTagName('base')[0].href;\r\n}\r\n\r\nconst providers = [\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n];\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}